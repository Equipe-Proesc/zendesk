[{"/home/luma/www/zendesk/web/src/index.js":"1","/home/luma/www/zendesk/web/src/App.js":"2","/home/luma/www/zendesk/web/src/routes.js":"3","/home/luma/www/zendesk/web/src/Pages/Dashboard/index.js":"4","/home/luma/www/zendesk/web/src/Pages/Resultados/index.js":"5","/home/luma/www/zendesk/web/src/Pages/Home/index.js":"6","/home/luma/www/zendesk/web/src/services/api.js":"7","/home/luma/www/zendesk/web/src/Components/IndicatorCard/index.js":"8","/home/luma/www/zendesk/web/src/Components/Navbar/index.js":"9","/home/luma/www/zendesk/web/src/Components/AgentsSkeleton/index.js":"10","/home/luma/www/zendesk/web/src/Components/AgentCardResults/index.js":"11","/home/luma/www/zendesk/web/src/Components/AgentCard/index.js":"12","/home/luma/www/zendesk/web/src/Components/Navbar/SidebarData.js":"13"},{"size":197,"mtime":1609376350731,"results":"14","hashOfConfig":"15"},{"size":192,"mtime":1616729435171,"results":"16","hashOfConfig":"15"},{"size":480,"mtime":1630461968795,"results":"17","hashOfConfig":"15"},{"size":2116,"mtime":1625777603424,"results":"18","hashOfConfig":"15"},{"size":10755,"mtime":1644500031943,"results":"19","hashOfConfig":"15"},{"size":6530,"mtime":1646741544735,"results":"20","hashOfConfig":"15"},{"size":132,"mtime":1644500031947,"results":"21","hashOfConfig":"15"},{"size":314,"mtime":1616626021091,"results":"22","hashOfConfig":"15"},{"size":1370,"mtime":1625777603424,"results":"23","hashOfConfig":"15"},{"size":1117,"mtime":1623929635167,"results":"24","hashOfConfig":"15"},{"size":793,"mtime":1633584980731,"results":"25","hashOfConfig":"15"},{"size":449,"mtime":1630448682247,"results":"26","hashOfConfig":"15"},{"size":463,"mtime":1625777603424,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"e429et",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/luma/www/zendesk/web/src/index.js",[],["56","57"],"/home/luma/www/zendesk/web/src/App.js",[],"/home/luma/www/zendesk/web/src/routes.js",[],"/home/luma/www/zendesk/web/src/Pages/Dashboard/index.js",[],"/home/luma/www/zendesk/web/src/Pages/Resultados/index.js",["58"],"import React, { useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport './style.css';\nimport AgentCard from '../../Components/AgentCardResults'\nimport AgentsSkeleton from '../../Components/AgentsSkeleton'\nimport Navbar from '../../Components/Navbar';\nimport { FaSearch } from 'react-icons/fa';\nimport IndicatorCard from '../../Components/IndicatorCard';\nimport { format } from 'date-fns'\n\nexport default function Results() {\n    const [loading, setLoading] = useState(false);\n    \n    const [solvedTickets, setSolvedTickets] = useState('');\n    const [pendingTickets, setPendingTickets] = useState('');\n    const [openTickets, setOpenTickets] = useState('');\n    const currentDate = format(new Date(), 'yyyy-MM-dd');\n    const [inicialDate, setInicialDate] = useState(currentDate);\n    const [finalDate, setFinalDate] = useState(currentDate);\n    const [agentInfos, setAgentInfos] = useState([]);\n    useEffect(() => {\n        searchResultsTickets();\n\n        window.onscroll = function() {myFunction()};\n\n        var header = document.getElementById(\"header-agents\");\n        var sticky = header.offsetTop;\n\n        function myFunction() {\n        if (window.pageYOffset > sticky) {\n            header.classList.add(\"sticky\");\n        } else {\n            header.classList.remove(\"sticky\");\n        }\n        }\n    }, [])\n    const [agentes] = useState(\n            [\n                {\n                    name:'lucas',\n                    image:'https://trello-attachments.s3.amazonaws.com/60353fe07ac21479926b9f40/511x512/70456850a92e4d8718e6f7613e066e66/Screenshot_3.png'\n                },\n                {\n                    name:'luma',\n                    image:'https://trello-attachments.s3.amazonaws.com/6036bbbae08c87245655c33e/247x256/4295998a229b8199a8e63e3d50d23cba/image.png'\n                },\n                {\n                    name:'douglas',\n                    image:'https://trello-attachments.s3.amazonaws.com/6035712992fb3687357181b6/792x793/503a808e6af8a30822fee82ecca57fdb/img_-_Douglas_Esp%C3%ADndola.png'\n                },\n                {\n                    name:'aureane',\n                    image:'https://ca.slack-edge.com/T56FFG3EW-U01U6B19UFN-2a39f84e3a7d-512'\n                },\n                {\n                    name:'uber',\n                    image:'https://trello-attachments.s3.amazonaws.com/603481895db937125c03e74e/6035669cd828620144745941/af370852f7956cc1da2c024e1e55ffd3/image.png',\n                    chat: false\n                },\n                {\n                    name:'alexandre',\n                    image:'https://trello-attachments.s3.amazonaws.com/604bccc4d51c2b27a69d9cd4/195x197/1af6bb25c8f05b934a163386daabac39/Screenshot_65.png',\n                    chat: true\n                },\n                {\n                    name:'gabriel',\n                    image:'https://ca.slack-edge.com/T56FFG3EW-U01PVV09MT6-f77d984f9feb-512',\n                    chat: true\n                },\n                {\n                    name:'drianne',\n                    image:'https://trello-attachments.s3.amazonaws.com/6036b82d00e3de2b27796ff7/960x1280/3d94b336907be4f26cf5e2dd1ef60791/foto_atualizada.jpeg.jpg',\n                    chat: true\n                },\n                {\n                    name:'fernanda',\n                    image:'https://trello-attachments.s3.amazonaws.com/6035439118587528d04f1cf3/538x678/b8b4f30540823c59704b5976cd3ede74/image.png',\n                    chat: true\n                },\n                {\n                    name:'giovanna',\n                    image:'https://trello-attachments.s3.amazonaws.com/60353fe15584ee18e0dd08d1/1153x2048/526869e1b4204291de6fe2d3fa9e6c54/EqgilqwXAAMboqL_-_Giovanna_Lourinho.png',\n                    chat: true\n                },\n                {\n                    name:'duarte',\n                    image:'https://ca.slack-edge.com/T029TQP6WQ7-U02AY6116QG-30a8df6ae2c3-512',\n                    chat: true\n                },\n                {\n                    name:'aline',\n                    image:'https://ca.slack-edge.com/T02AY5X4DFS-U02A8N19NFM-b3aca9920403-512',\n                    chat: true\n                },\n            ]\n        );\n        async function searchResultsTickets(e){\n            if(e){\n                e.preventDefault();\n            }\n            if (!loading) {\n                try{\n                    setLoading(true);\n                    let AgentsInfoTemp = [];\n                    for (const agente of agentes){\n                        let infoAgent = {};\n                        infoAgent = {\n                            ...infoAgent,\n                            name:agente.name?agente.name:'Nao encontrado',\n                            image:agente.image?agente.image:'Nao encontrado',\n                            chat: agente.chat\n                        }\n                        const response = await api.get(`/tickets/?filter=tags:${agente.name} status:solved status:closed solved>=${inicialDate} solved<=${finalDate}`);\n\n                        infoAgent = {\n                            ...infoAgent,\n                            total:response.data?response.data:0\n                        }\n\n                        const response2 = await api.get(`/tickets/?filter=tags:${agente.name} ticket_type:question status:solved status:closed solved>=${inicialDate} solved<=${finalDate}`);\n                        infoAgent = {\n                            ...infoAgent,\n                            question:response2.data?response2.data:0\n                        }\n\n                        const response3 = await api.get(`/tickets/?filter=tags:${agente.name} ticket_type:task status:solved status:closed solved>=${inicialDate} solved<=${finalDate}`);\n                        infoAgent = {\n                            ...infoAgent,\n                            task:response3.data?response3.data:0\n                        }\n\n                        const response4 = await api.get(`/tickets/?filter=tags:${agente.name} ticket_type:problem status:solved status:closed solved>=${inicialDate} solved<=${finalDate}`);\n                        infoAgent = {\n                            ...infoAgent,\n                            problem:response4.data?response4.data:0\n                        }\n                        if(agente.chat === true){\n                            const responseChat = await api.get(`/chats/?filter=agent_names:${agente.name} AND timestamp:[${inicialDate} TO ${finalDate}]`);\n                            infoAgent = {\n                                ...infoAgent,\n                                chats:responseChat.data? responseChat.data:0\n                            }\n\n                            const responseChatRating = await api.get(`/chats/?filter=agent_names:${agente.name} AND timestamp:[${inicialDate} TO ${finalDate}] AND rating:bad`);\n                            infoAgent = {\n                                ...infoAgent,\n                                chatRating:responseChatRating.data? responseChatRating.data:0\n                            }\n                        }else{\n                            infoAgent = {\n                                ...infoAgent,\n                                chats:0\n                            }\n                            infoAgent = {\n                                ...infoAgent,\n                                chatRating:0\n                            }\n                        }\n                        AgentsInfoTemp = [\n                            ...AgentsInfoTemp,\n                            infoAgent\n                        ]\n                    }\n                    setAgentInfos([\n                            ...AgentsInfoTemp\n                        ])\n\n                        const response5 = await api.get(`/tickets/?filter=status:solved status:closed solved>=${inicialDate} solved<=${finalDate}`);\n                        setSolvedTickets(response5.data);\n            \n                        const response6 = await api.get(`/tickets/?filter=status:pending`);\n                        setPendingTickets(response6.data);\n            \n                        const response7 = await api.get(`/tickets/?filter=status:open status:new`);\n                        setOpenTickets(response7.data);\n                }catch(error){\n                    console.log('erro ao carregar dados: '+error.message);\n                }finally{\n                    setLoading(false);\n                }\n            }              \n        }\n    return (\n        <div className=\"tickets-container-results\">\n            <Navbar />\n            <header className=\"tickets-header\">\n                <h1>Resultados da semana</h1>\n                <form onSubmit={searchResultsTickets}>\n                    <input type=\"date\" name=\"\" id=\"inicialDate\" onChange={e => setInicialDate(e.target.value)} value={inicialDate}/>\n                    <input type=\"date\" name=\"\" id=\"finalDate\" onChange={e => setFinalDate(e.target.value)} value={finalDate}/>\n                    <button type=\"submit\" className=\"form-button\" id=\"searchButton\"> <FaSearch /></button>\n                </form>\n            </header>\n\n            {loading && <AgentsSkeleton />}\n            <div className=\"agents-container-results\">\n            <div className=\"header\" id=\"header-agents\">\n                <p>Agente</p>\n                <p className=\"question\">Dúvidas</p>\n                <p className=\"task\">Tarefas</p>\n                <p className=\"problem\">Problemas</p>\n                <p>Total</p>\n                <p>Chat</p>\n                <p>Satisfação</p>\n            </div>\n            {!loading && (\n                agentInfos.map((agente)=>{\n                    return(\n                            <AgentCard \n                                agent_picture={agente.image}\n                                agent={agente.name} \n                                key={agente.name}\n                                chat={agente.chat}\n                                total={agente.total} question={agente.question} task={agente.task} problem={agente.problem}\n                                count_chats={agente.chats} satisfaction={agente.chats > 0 ? (100-((agente.chatRating) * 100/ agente.chats)).toFixed(2) : 0 } \n                            />   \n                        \n                    )\n                }) \n                \n            )}\n            </div>\n            <div className=\"indicators-container\">\n                < IndicatorCard color=\"sucess\" number={solvedTickets} text=\"Resolvidos\"/>\n                < IndicatorCard color=\"info\" number={pendingTickets} text=\"Pendentes\"/>\n                < IndicatorCard color=\"warning\" number={openTickets} text=\"Em aberto\"/>\n            </div> \n        </div>\n    )\n}","/home/luma/www/zendesk/web/src/Pages/Home/index.js",["59"],"/home/luma/www/zendesk/web/src/services/api.js",[],"/home/luma/www/zendesk/web/src/Components/IndicatorCard/index.js",[],"/home/luma/www/zendesk/web/src/Components/Navbar/index.js",[],"/home/luma/www/zendesk/web/src/Components/AgentsSkeleton/index.js",[],"/home/luma/www/zendesk/web/src/Components/AgentCardResults/index.js",[],"/home/luma/www/zendesk/web/src/Components/AgentCard/index.js",[],"/home/luma/www/zendesk/web/src/Components/Navbar/SidebarData.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":36,"column":8,"nodeType":"66","endLine":36,"endColumn":10,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":6,"column":10,"nodeType":"70","messageId":"71","endLine":6,"endColumn":14},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchResultsTickets'. Either include it or remove the dependency array.","ArrayExpression",["74"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [searchResultsTickets]",{"range":"77","text":"78"},[1345,1347],"[searchResultsTickets]"]